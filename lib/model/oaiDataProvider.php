<?php


/**
 * Skeleton subclass for representing a row from the 'oai_data_provider' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Nov 11 12:36:26 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.dcOAIServiceProviderPlugin.lib.model
 */
class oaiDataProvider extends BaseoaiDataProvider
{
  protected $_is_reachable;

	/**
	 * Initializes internal state of oaiDataProvider object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}

  public function __toString()
  {
    if ($this->hasName())
    {
      return $this->getName();
    }

    return $this->getUrl();
  }

  /**
   * Answer whether this object has its name attribute set.
   *
   * @return bool
   */
  public function hasName()
  {
    return ('' != trim($this->getName()));
  }

  /**
   * Answer whether this oaiDataProvider is reachable. This method
   * caches the first attempt and stores it for future reference
   * unless $force parameter is TRUE, in which case the test
   * will always be performed regardless of past results.
   *
   * @param  bool $force TRUE if test must be forced.
   *
   * @return bool
   */
  public function isReachable($force = false)
  {
    if (null === $this->_is_reachable || true === $force)
    {
      $this->_is_reachable = $this->testReach();
    }

    return $this->_is_reachable;
  }

  /**
   * Test if this oaiDataProvider's url is reachable.
   *
   * @return bool
   */
  protected function testReach()
  {
    return (false !== @file_get_contents($this->getUrl()));
  }

  /**
   * Create a request URL from url and $parameters, and return it.
   *
   * @param  array $parameters The optional parameters for the request.
   *
   * @return string
   */
  public function getRequestURL($parameters = array())
  {
    array_walk($parameters, create_function('&$value, $key', '$value = $key."=".$value;'));

    return sprintf('%s?%s', rtrim($this->getUrl(), '/'), implode('&', $parameters));
  }

  /**
   * Set this provider to be enabled and save it.
   *
   * @param PropelPDO $con Optional PDO object.
   */
  public function enable(PropelPDO $con = null)
  {
    if (!$this->getIsEnabled())
    {
      $this
        ->setIsEnabled(true)
        ->save($con)
      ;
    }
  }

  /**
   * Set this provider to be disabled and save it.
   *
   * @param PropelPDO $con Optional PDO object.
   */
  public function disable(PropelPDO $con = null)
  {
    if ($this->getIsEnabled())
    {
      $this
        ->setIsEnabled(false)
        ->save($con)
      ;
    }
  }

  /**
   * Answer whether this data provider has set
   * a last error message.
   *
   * @return bool
   */
  public function hasLastError()
  {
    return ('' != trim($this->getLastError()));
  }

} // oaiDataProvider
